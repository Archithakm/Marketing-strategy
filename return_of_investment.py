# -*- coding: utf-8 -*-
"""Return of Investment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMTBHNHGb-xUKvWULN9Wfrcr0VDbrquJ
"""

import pandas as pd
df=pd.read_csv("/content/ROI dataset.csv")
df.head()

import pandas as pd

def calculate_roi(row):
    net_profit = row['CurrentIncome'] + row['EarningPotential']
    return (net_profit / row['SpendingLimit']) * 100

df['ROI'] = df.apply(calculate_roi, axis=1)
print(df[['CurrentIncome', 'EarningPotential', 'SpendingLimit', 'ROI']])

import pandas as pd

top_max_roi = df.nlargest(3, 'ROI')
print(top_max_roi)

import pandas as pd

target_country = 'India'
country_df = df[df['Location'] == target_country]
top_max_roi_country = country_df.nlargest(1, 'ROI')
print(top_max_roi_country)

import pandas as pd
top_customers = df.nlargest(3, 'ROI')[['CustomerID', 'Location','ROI']]
print(top_customers)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

X = df[['Age', 'Savings', 'EarningPotential', 'HistoricalSpending', 'CreditScore']]
y = df['SpendingLimit']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (RÂ²): {r2:.2f}")

import pandas as pd
import matplotlib.pyplot as plt

gender_counts = df['Gender'].value_counts()

plt.bar(gender_counts.index, gender_counts.values)
plt.xlabel('Gender')
plt.ylabel('Number of Customers')
plt.title('Distribution of Male and Female Customers')
plt.show()

print("There is gender imbalance, with over 300 males and nearly 150 females.")

import pandas as pd
import matplotlib.pyplot as plt

edu_roi = df.groupby('EducationalStatus')['ROI'].mean()

fig, ax = plt.subplots(figsize=(6, 3))
edu_roi.plot(kind='bar', color='skyblue', ax=ax, position=1, width=0.4, label='Mean ROI')
ax.set_ylabel('Mean ROI')
ax.set_xlabel('Educational Status')
ax.set_title('Educational Status vs. Mean ROI')

plt.xticks(range(len(edu_roi.index)), edu_roi.index)
plt.legend(loc='upper right')
plt.show()

print("Phd holders contribute to higher ROI followed by Masters,Bachelor and High school students")

!pip install geopandas

import geopandas as gpd
import matplotlib.pyplot as plt
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
merged_data = world.merge(df, left_on='name', right_on='Location')
fig, ax = plt.subplots(1, 1, figsize=(12, 8))
ax.set_title('Country Data on Map')
world.boundary.plot(ax=ax, linewidth=1)
merged_data.plot(column='SpendingLimit', ax=ax, legend=True, legend_kwds={'label': "Spending Limit"})

plt.show()

import pandas as pd
import matplotlib.pyplot as plt
plt.figure(figsize=(6,4))
plt.hist(df['Age'], bins=10, color='skyblue', edgecolor='black')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution')
plt.grid(axis='y', alpha=0.75)

plt.show()
print("Citizens with age of 25-35 are high contributers.")

import pandas as pd
import matplotlib.pyplot as plt

plt.figure(figsize=(5,5))
plt.boxplot(df['CreditScore'])
plt.title('Credit Score Box Plot')
plt.ylabel('Credit Score')
plt.show()

print("Credit score range from 700-720 and there 3 outliers of Credit score")

import pandas as pd
import matplotlib.pyplot as plt

top_5_customers = df.sort_values(by='ROI', ascending=False).head(5)

plt.figure(figsize=(10, 6))
plt.barh(top_5_customers['CustomerID'], top_5_customers['ROI'], color='skyblue')
plt.xlabel('ROI')
plt.ylabel('Customer ID')
plt.title('Top 5 Customers with Highest ROI')

for index, row in top_5_customers.iterrows():
    plt.text(row['ROI'], row['CustomerID'], f'Customer {int(row["CustomerID"])}', ha='right')

plt.grid(axis='x', alpha=0.75)

plt.show()
print("Customer 494 has highest ROI followed by Customer 378,Customer316,Customer225 and Customer1")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(6, 6))
sns.violinplot(data=df, x='EducationalStatus', y='HistoricalSpending', palette='Set2')
plt.xlabel('Educational Status')
plt.ylabel('Historical Pending')
plt.title('Violin Plot: Historical Pending by Educational Status')

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

correlation_matrix = df.corr()

plt.figure(figsize=(5,5))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix Heatmap')
plt.show()

# Function to calculate ROI
def calculate_roi(net_profit, cost):
    return (net_profit / cost) * 100

try:
    user_id = input("Enter User ID: ")
    net_profit = float(input("Enter Net Profit: "))
    cost = float(input("Enter Cost: "))

    # Calculate ROI
    roi = calculate_roi(net_profit, cost)

    # Display the ROI for the user
    print(f"User ID: {user_id}, Net Profit: {net_profit}, Cost: {cost}, ROI: {roi:.2f}")

except ValueError:
    print("Invalid input. Please enter valid numerical values.")

import pickle

# Trained model
trained_model = ...  # Your trained model object

# Save the model to a file
with open('trained_model.pkl', 'wb') as model_file:
    pickle.dump(trained_model, model_file)

# app.py
import os
from flask import Flask, render_template, request, redirect, url_for, flash
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.secret_key = 'supersecretkey'

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        flash('No file part')
        return redirect(request.url)

    file = request.files['file']

    if file.filename == '':
        flash('No selected file')
        return redirect(request.url)

    if file:
        filename = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filename)

        # Perform data preprocessing (e.g., using pandas)
        df = pd.read_csv(filename)

        # Assuming the target column is 'target'
        X = df.drop(columns=['target'])
        y = df['target']

        # Split the data into training and testing sets
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Perform feature selection (sample code)
        from sklearn.feature_selection import SelectKBest, f_classif
        k_best_selector = SelectKBest(score_func=f_classif, k=10)
        X_train_new = k_best_selector.fit_transform(X_train, y_train)
        X_test_new = k_best_selector.transform(X_test)

        # Train a machine learning model (sample code)
        model = RandomForestClassifier()
        model.fit(X_train_new, y_train)

        # Test the model
        accuracy = model.score(X_test_new, y_test)

        flash(f'File uploaded, processed, and model trained. Test accuracy: {accuracy * 100:.2f}%')
        return redirect(request.url)

if __name__ == '_main_':
    app.run(debug=True)

